// src/app/components/EmotePicker.jsx
'use client'; // „ÇØ„É©„Ç§„Ç¢„É≥„Éà„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Åß„ÅÇ„Çã„Åì„Å®„ÇíÊòéÁ§∫

import React, { useState } from 'react';
import { supabase } from '@/lib/supabaseClient'; // Supabase„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Çí„Ç§„É≥„Éù„Éº„Éà
import { useAudioPlayer } from '@/context/AudioPlayerContext'; // ËøΩÂä†


// Ë°®Á§∫„Åô„ÇãÁµµÊñáÂ≠ó„ÅÆ„É™„Çπ„Éà
const EMOTES = ['‚ù§Ô∏è', 'üòÇ', 'üò≠', 'üî•', 'üëç', 'üëé'];
// „ÇØ„Éº„É´„ÉÄ„Ç¶„É≥ÊôÇÈñìÔºà„Éü„É™ÁßíÔºâ
const COOLDOWN_TIME = 3000; // 3ÁßíÈñì„Å´1Âõû„Åæ„ÅßÊäïÁ®øÂèØËÉΩ

export default function EmotePicker({ trackId, timestampSeconds, onClose, layerRef, anchorRef}) {
  const [loading, setLoading] = useState(false);
  const [cooldown, setCooldown] = useState(false); // „ÇØ„Éº„É´„ÉÄ„Ç¶„É≥‰∏≠„Åã„Å©„ÅÜ„Åã„ÅÆÁä∂ÊÖã
  const {addLocalEmote} = useAudioPlayer();

  const calcAnchorPercentPos = () => {
    if (!layerRef?.current || !anchorRef?.current) return null;
    const layer = layerRef.current.getBoundingClientRect();
    const anchor = anchorRef.current.getBoundingClientRect();

    const cx = anchor.left + anchor.width / 2;
    const cy = anchor.top; // „Éú„Çø„É≥„ÅÆ‰∏äËæ∫

    let xPct = ((cx - layer.left) / layer.width) * 100;
    let yPct = ((cy - layer.top) / layer.height) * 100 - 6;

    xPct = Math.max(5, Math.min(95, xPct));
    yPct = Math.max(5, Math.min(95, yPct));
    return { xPct, yPct };
  };

  console.log(`[EmotePicker Render] trackId: ${trackId}, timestampSeconds: ${timestampSeconds}, onClose: ${typeof onClose}`);

  // „Ç®„É¢„Éº„ÉàÊäïÁ®øÂá¶ÁêÜ
  const handleEmoteClick = async (emoji) => {
    if (loading || cooldown) return; // ÊäïÁ®ø‰∏≠„Åæ„Åü„ÅØ„ÇØ„Éº„É´„ÉÄ„Ç¶„É≥‰∏≠„ÅØÊìç‰Ωú‰∏çÂèØ

    setLoading(true); // ÊäïÁ®øÈñãÂßã
    setCooldown(true); // „ÇØ„Éº„É´„ÉÄ„Ç¶„É≥ÈñãÂßã
    const pos = calcAnchorPercentPos();
    const ts = Number.isFinite(timestampSeconds) ? timestampSeconds : 0;
    addLocalEmote(emoji, ts, pos);

    try {
      const { error } = await supabase
        .from('track_emotes')
        .insert({
          track_id: trackId,
          timestamp_seconds: ts,
          emoji: emoji,
        });

      if (error) {
        console.error('„Ç®„É¢„Éº„ÉàÊäïÁ®ø„Ç®„É©„Éº:', error);
        alert('„Ç®„É¢„Éº„Éà„ÅÆÊäïÁ®ø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ');
      } else {
        console.log(`„Ç®„É¢„Éº„Éà "${emoji}" „Çí„Éà„É©„ÉÉ„ÇØ ${trackId} „ÅÆ ${timestampSeconds}Áßí„Å´ÊäïÁ®ø„Åó„Åæ„Åó„Åü„ÄÇ`);
        // ÊäïÁ®øÊàêÂäüÂæå„ÄÅ„Éë„Éç„É´„ÇíÈñâ„Åò„Çã
        if (onClose) onClose();
      }
    } catch (err) {
      console.error('‰∫àÊúü„Åõ„Å¨„Ç®„É¢„Éº„ÉàÊäïÁ®ø„Ç®„É©„Éº:', err);
      alert('„Ç®„É¢„Éº„ÉàÊäïÁ®ø‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
    } finally {
      setLoading(false); // „É≠„Éº„ÉâÁµÇ‰∫Ü
      // „ÇØ„Éº„É´„ÉÄ„Ç¶„É≥„Çø„Ç§„Éû„Éº„ÇíÈñãÂßã
      setTimeout(() => setCooldown(false), COOLDOWN_TIME);
    }
  };

  return (
    <div className="bg-gray-700 rounded-lg shadow-lg p-2">
      <div className="flex space-x-2">
        {EMOTES.map((emoji) => (
          <button
            key={emoji}
            onClick={() => handleEmoteClick(emoji)}
            className={`text-2xl p-2 rounded-full hover:bg-gray-600 transition-colors duration-200 ${
              loading || cooldown ? 'opacity-50 cursor-not-allowed' : ''
            }`}
            disabled={loading || cooldown}
            aria-label={`${emoji} „Ç®„É¢„Éº„Éà„ÇíÈÄÅ‰ø°`}
          >
            {emoji}
          </button>
        ))}
      </div>
      {(loading || cooldown) && (
        <div className="text-center text-xs text-gray-300 mt-2">
          {loading ? 'ÈÄÅ‰ø°‰∏≠‚Ä¶' : `„ÇØ„Éº„É´„ÉÄ„Ç¶„É≥‰∏≠ (${COOLDOWN_TIME / 1000}Áßí)`}
        </div>
      )}
    </div>
  );
}
